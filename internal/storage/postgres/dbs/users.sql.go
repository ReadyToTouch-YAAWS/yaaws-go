// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package dbs

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const userRegistrationDailyCountStats = `-- name: UserRegistrationDailyCountStats :many
SELECT days.day::DATE                    AS day,
       COALESCE(s.user_count, 0)::BIGINT AS user_count
FROM GENERATE_SERIES(
    $1::DATE,
    $2::DATE,
    '1 DAY'::INTERVAL
) AS days (day)
    LEFT JOIN (
        SELECT DATE_TRUNC('DAY', created_at) AS day,
               COUNT(*)                      AS user_count
        FROM users
        WHERE created_at >= $1::DATE
        GROUP BY day
    ) AS s ON (days.day = s.day)
ORDER BY days.day
`

type UserRegistrationDailyCountStatsParams struct {
	From pgtype.Date
	To   pgtype.Date
}

type UserRegistrationDailyCountStatsRow struct {
	Day       pgtype.Date
	UserCount int64
}

func (q *Queries) UserRegistrationDailyCountStats(ctx context.Context, arg UserRegistrationDailyCountStatsParams) ([]UserRegistrationDailyCountStatsRow, error) {
	rows, err := q.db.Query(ctx, userRegistrationDailyCountStats, arg.From, arg.To)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRegistrationDailyCountStatsRow
	for rows.Next() {
		var i UserRegistrationDailyCountStatsRow
		if err := rows.Scan(&i.Day, &i.UserCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
