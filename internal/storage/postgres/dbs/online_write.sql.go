// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: online_write.sql

package dbs

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const userOnlineDailyCountStatsUpsert = `-- name: UserOnlineDailyCountStatsUpsert :exec
INSERT INTO user_online_daily_count_stats (online, user_count)
SELECT source.online, COUNT(*)
FROM user_online_daily_stats AS source
WHERE source.online >= $1
GROUP BY source.online
ORDER BY source.online
ON CONFLICT (online)
    DO UPDATE
    SET user_count = excluded.user_count
`

func (q *Queries) UserOnlineDailyCountStatsUpsert(ctx context.Context, online pgtype.Date) error {
	_, err := q.db.Exec(ctx, userOnlineDailyCountStatsUpsert, online)
	return err
}

const userOnlineDailyStatsUpsert = `-- name: UserOnlineDailyStatsUpsert :execrows
INSERT INTO user_online_daily_stats (online, user_id)
VALUES (unnest($1::DATE[]),
        unnest($2::BIGINT[]))
ON CONFLICT (online, user_id) DO NOTHING
`

type UserOnlineDailyStatsUpsertParams struct {
	Onlines []pgtype.Date
	UserIds []int64
}

func (q *Queries) UserOnlineDailyStatsUpsert(ctx context.Context, arg UserOnlineDailyStatsUpsertParams) (int64, error) {
	result, err := q.db.Exec(ctx, userOnlineDailyStatsUpsert, arg.Onlines, arg.UserIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const userOnlineHourlyStatsUpsert = `-- name: UserOnlineHourlyStatsUpsert :execrows
INSERT INTO user_online_hourly_stats (user_id, online)
VALUES (unnest($1::BIGINT[]),
        unnest($2::TIMESTAMP[]))
ON CONFLICT (user_id, online) DO NOTHING
`

type UserOnlineHourlyStatsUpsertParams struct {
	UserIds []int64
	Onlines []pgtype.Timestamp
}

func (q *Queries) UserOnlineHourlyStatsUpsert(ctx context.Context, arg UserOnlineHourlyStatsUpsertParams) (int64, error) {
	result, err := q.db.Exec(ctx, userOnlineHourlyStatsUpsert, arg.UserIds, arg.Onlines)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
