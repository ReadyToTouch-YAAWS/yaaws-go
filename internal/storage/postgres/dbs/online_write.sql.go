// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: online_write.sql

package dbs

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const userOnlineDailyCountStatsUpsert = `-- name: UserOnlineDailyCountStatsUpsert :exec
INSERT INTO user_online_daily_count_stats (created_at, user_count)
SELECT source.created_at, COUNT(*)
FROM user_online_daily_stats AS source
WHERE source.created_at >= $1
GROUP BY source.created_at
ORDER BY source.created_at
ON CONFLICT (created_at)
    DO UPDATE
    SET user_count = excluded.user_count
`

func (q *Queries) UserOnlineDailyCountStatsUpsert(ctx context.Context, createdAt time.Time) error {
	_, err := q.exec(ctx, q.userOnlineDailyCountStatsUpsertStmt, userOnlineDailyCountStatsUpsert, createdAt)
	return err
}

const userOnlineDailyStatsUpsert = `-- name: UserOnlineDailyStatsUpsert :execrows
INSERT INTO user_online_daily_stats (created_at, user_id)
VALUES (unnest($1::DATE[]),
        unnest($2::BIGINT[]))
ON CONFLICT (created_at, user_id) DO NOTHING
`

type UserOnlineDailyStatsUpsertParams struct {
	CreatedAts []time.Time
	UserIds    []int64
}

func (q *Queries) UserOnlineDailyStatsUpsert(ctx context.Context, arg UserOnlineDailyStatsUpsertParams) (int64, error) {
	result, err := q.exec(ctx, q.userOnlineDailyStatsUpsertStmt, userOnlineDailyStatsUpsert, pq.Array(arg.CreatedAts), pq.Array(arg.UserIds))
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const userOnlineHourlyStatsUpsert = `-- name: UserOnlineHourlyStatsUpsert :execrows
INSERT INTO user_online_hourly_stats (user_id, created_at)
VALUES (unnest($1::BIGINT[]),
        unnest($2::TIMESTAMP[]))
ON CONFLICT (user_id, created_at) DO NOTHING
`

type UserOnlineHourlyStatsUpsertParams struct {
	UserIds    []int64
	CreatedAts []time.Time
}

func (q *Queries) UserOnlineHourlyStatsUpsert(ctx context.Context, arg UserOnlineHourlyStatsUpsertParams) (int64, error) {
	result, err := q.exec(ctx, q.userOnlineHourlyStatsUpsertStmt, userOnlineHourlyStatsUpsert, pq.Array(arg.UserIds), pq.Array(arg.CreatedAts))
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
