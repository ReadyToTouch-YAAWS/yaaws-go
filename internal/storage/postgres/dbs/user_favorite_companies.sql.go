// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user_favorite_companies.sql

package dbs

import (
	"context"
	"time"
)

const userFavoriteCompanies = `-- name: UserFavoriteCompanies :many
SELECT company_id
FROM user_favorite_companies
WHERE user_id = $1
  AND favorite = TRUE
`

func (q *Queries) UserFavoriteCompanies(ctx context.Context, userID int64) ([]int64, error) {
	rows, err := q.query(ctx, q.userFavoriteCompaniesStmt, userFavoriteCompanies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var company_id int64
		if err := rows.Scan(&company_id); err != nil {
			return nil, err
		}
		items = append(items, company_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userFavoriteCompaniesStats = `-- name: UserFavoriteCompaniesStats :one
SELECT COUNT(*)                                                             AS count,
       COUNT(*) FILTER ( WHERE created_at::DATE >= $1::DATE ) AS count_since
FROM user_favorite_companies
WHERE company_id = $2
  AND favorite = TRUE
`

type UserFavoriteCompaniesStatsParams struct {
	From      time.Time
	CompanyID int64
}

type UserFavoriteCompaniesStatsRow struct {
	Count      int64
	CountSince int64
}

func (q *Queries) UserFavoriteCompaniesStats(ctx context.Context, arg UserFavoriteCompaniesStatsParams) (UserFavoriteCompaniesStatsRow, error) {
	row := q.queryRow(ctx, q.userFavoriteCompaniesStatsStmt, userFavoriteCompaniesStats, arg.From, arg.CompanyID)
	var i UserFavoriteCompaniesStatsRow
	err := row.Scan(&i.Count, &i.CountSince)
	return i, err
}

const userFavoriteCompaniesUpsert = `-- name: UserFavoriteCompaniesUpsert :exec
INSERT INTO user_favorite_companies AS t (user_id, company_id, favorite, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (user_id, company_id)
    DO UPDATE
    SET favorite   = excluded.favorite,
        updated_at = excluded.updated_at
WHERE t.favorite <> excluded.favorite
`

type UserFavoriteCompaniesUpsertParams struct {
	UserID    int64
	CompanyID int64
	Favorite  bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UserFavoriteCompaniesUpsert(ctx context.Context, arg UserFavoriteCompaniesUpsertParams) error {
	_, err := q.exec(ctx, q.userFavoriteCompaniesUpsertStmt, userFavoriteCompaniesUpsert,
		arg.UserID,
		arg.CompanyID,
		arg.Favorite,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
