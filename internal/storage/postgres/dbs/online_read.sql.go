// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: online_read.sql

package dbs

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const userOnlineDailyCountStats = `-- name: UserOnlineDailyCountStats :many
SELECT days.day::DATE                    AS day,
       COALESCE(s.user_count, 0)::BIGINT AS user_count
FROM GENERATE_SERIES(
    $1::DATE,
    $2::DATE,
    '1 DAY'::INTERVAL
) AS days (day)
    LEFT JOIN user_online_daily_count_stats s ON (days.day = s.created_at)
ORDER BY days.day
`

type UserOnlineDailyCountStatsParams struct {
	From pgtype.Date
	To   pgtype.Date
}

type UserOnlineDailyCountStatsRow struct {
	Day       pgtype.Date
	UserCount int64
}

func (q *Queries) UserOnlineDailyCountStats(ctx context.Context, arg UserOnlineDailyCountStatsParams) ([]UserOnlineDailyCountStatsRow, error) {
	rows, err := q.db.Query(ctx, userOnlineDailyCountStats, arg.From, arg.To)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserOnlineDailyCountStatsRow
	for rows.Next() {
		var i UserOnlineDailyCountStatsRow
		if err := rows.Scan(&i.Day, &i.UserCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userOnlineHourlyStats = `-- name: UserOnlineHourlyStats :many
SELECT user_id, created_at
FROM user_online_hourly_stats
ORDER BY user_id, created_at
`

func (q *Queries) UserOnlineHourlyStats(ctx context.Context) ([]UserOnlineHourlyStat, error) {
	rows, err := q.db.Query(ctx, userOnlineHourlyStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserOnlineHourlyStat
	for rows.Next() {
		var i UserOnlineHourlyStat
		if err := rows.Scan(&i.UserID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
