// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_online.sql

package dbs

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const userOnlineBatchUpdate = `-- name: UserOnlineBatchUpdate :exec
UPDATE user_online AS to_t
SET online = from_t.online
FROM (
         SELECT unnest($1::BIGINT[])   AS user_id,
                unnest($2::TIMESTAMP[]) AS online
     ) AS from_t
WHERE to_t.user_id = from_t.user_id
`

type UserOnlineBatchUpdateParams struct {
	UserIds []int64
	Onlines []pgtype.Timestamp
}

func (q *Queries) UserOnlineBatchUpdate(ctx context.Context, arg UserOnlineBatchUpdateParams) error {
	_, err := q.db.Exec(ctx, userOnlineBatchUpdate, arg.UserIds, arg.Onlines)
	return err
}

const userOnlineUpsert = `-- name: UserOnlineUpsert :exec
INSERT INTO user_online (user_id, online)
VALUES ($1, $2)
ON CONFLICT (user_id) DO UPDATE
    SET online = $2
`

type UserOnlineUpsertParams struct {
	UserID int64
	Online pgtype.Timestamp
}

func (q *Queries) UserOnlineUpsert(ctx context.Context, arg UserOnlineUpsertParams) error {
	_, err := q.db.Exec(ctx, userOnlineUpsert, arg.UserID, arg.Online)
	return err
}
